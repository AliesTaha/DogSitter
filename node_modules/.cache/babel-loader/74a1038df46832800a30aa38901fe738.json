{"ast":null,"code":"import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\n/**\r\n * Returns a number whose value is limited to the given range.\r\n * @param {number} value The value to be clamped\r\n * @param {number} min The lower boundary of the output range\r\n * @param {number} max The upper boundary of the output range\r\n * @returns {number} A number in the range [min, max]\r\n */\n\nfunction clamp(value) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\r\n * Converts a color from CSS hex format to CSS rgb format.\r\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\r\n * @returns {string} A CSS rgb color string\r\n */\n\n\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n/**\r\n * Returns an object with the type and values of a color.\r\n *\r\n * Note: Does not support rgb % values.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @returns {object} - A MUI color object: {type: string, values: number[]}\r\n */\n\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : _formatMuiErrorMessage(9, color));\n  }\n\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n/**\r\n * Returns a channel created from the input color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\r\n */\n\nexport const colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\n/**\r\n * Converts a color object with type and values to a string.\r\n * @param {object} color - Decomposed color\r\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\r\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\r\n * @returns {string} A CSS color string\r\n */\n\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n\n  return `${type}(${values})`;\n}\n/**\r\n * Converts a color from CSS rgb format to CSS hex format.\r\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\r\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\r\n */\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n/**\r\n * Converts a color from hsl format to rgb format.\r\n * @param {string} color - HSL color values\r\n * @returns {string} rgb color values\r\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n\n  const f = function (n) {\n    let k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\r\n * The relative brightness of any point in a color space,\r\n * normalized to 0 for darkest black and 1 for lightest white.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @returns {number} The relative brightness of the color in the range 0 - 1\r\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\r\n * Calculates the contrast ratio between two colors.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} A contrast ratio value in the range 0 - 21.\r\n */\n\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\r\n * Sets the absolute transparency of a color.\r\n * Any existing alpha values are overwritten.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\n/**\r\n * Darkens a color.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\r\n * Lightens a color.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\r\n * Darken or lighten a color, depending on its luminance.\r\n * Light colors are darkened, dark colors are lightened.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function emphasize(color) {\n  let coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}","map":{"version":3,"names":["formatMuiErrorMessage","_formatMuiErrorMessage","clamp","value","min","max","process","env","NODE_ENV","console","error","Math","hexToRgb","color","slice","re","RegExp","length","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","decomposeColor","type","charAt","marker","indexOf","substring","Error","values","colorSpace","split","shift","parseFloat","colorChannel","decomposedColor","val","idx","recomposeColor","i","rgbToHex","hslToRgb","h","s","l","a","f","k","rgb","push","getLuminance","Number","toFixed","getContrastRatio","foreground","background","lumA","lumB","alpha","darken","coefficient","lighten","emphasize"],"sources":["C:/Users/Karl/Documents/HackTheNorth/node_modules/@mui/system/esm/colorManipulator.js"],"sourcesContent":["import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\r\n\r\n/**\r\n * Returns a number whose value is limited to the given range.\r\n * @param {number} value The value to be clamped\r\n * @param {number} min The lower boundary of the output range\r\n * @param {number} max The upper boundary of the output range\r\n * @returns {number} A number in the range [min, max]\r\n */\r\nfunction clamp(value, min = 0, max = 1) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (value < min || value > max) {\r\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\r\n    }\r\n  }\r\n\r\n  return Math.min(Math.max(min, value), max);\r\n}\r\n/**\r\n * Converts a color from CSS hex format to CSS rgb format.\r\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\r\n * @returns {string} A CSS rgb color string\r\n */\r\n\r\n\r\nexport function hexToRgb(color) {\r\n  color = color.slice(1);\r\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\r\n  let colors = color.match(re);\r\n\r\n  if (colors && colors[0].length === 1) {\r\n    colors = colors.map(n => n + n);\r\n  }\r\n\r\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\r\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\r\n  }).join(', ')})` : '';\r\n}\r\n\r\nfunction intToHex(int) {\r\n  const hex = int.toString(16);\r\n  return hex.length === 1 ? `0${hex}` : hex;\r\n}\r\n/**\r\n * Returns an object with the type and values of a color.\r\n *\r\n * Note: Does not support rgb % values.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @returns {object} - A MUI color object: {type: string, values: number[]}\r\n */\r\n\r\n\r\nexport function decomposeColor(color) {\r\n  // Idempotent\r\n  if (color.type) {\r\n    return color;\r\n  }\r\n\r\n  if (color.charAt(0) === '#') {\r\n    return decomposeColor(hexToRgb(color));\r\n  }\r\n\r\n  const marker = color.indexOf('(');\r\n  const type = color.substring(0, marker);\r\n\r\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\r\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\r\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : _formatMuiErrorMessage(9, color));\r\n  }\r\n\r\n  let values = color.substring(marker + 1, color.length - 1);\r\n  let colorSpace;\r\n\r\n  if (type === 'color') {\r\n    values = values.split(' ');\r\n    colorSpace = values.shift();\r\n\r\n    if (values.length === 4 && values[3].charAt(0) === '/') {\r\n      values[3] = values[3].slice(1);\r\n    }\r\n\r\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\r\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\r\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : _formatMuiErrorMessage(10, colorSpace));\r\n    }\r\n  } else {\r\n    values = values.split(',');\r\n  }\r\n\r\n  values = values.map(value => parseFloat(value));\r\n  return {\r\n    type,\r\n    values,\r\n    colorSpace\r\n  };\r\n}\r\n/**\r\n * Returns a channel created from the input color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\r\n */\r\n\r\nexport const colorChannel = color => {\r\n  const decomposedColor = decomposeColor(color);\r\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\r\n};\r\n/**\r\n * Converts a color object with type and values to a string.\r\n * @param {object} color - Decomposed color\r\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\r\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\r\n * @returns {string} A CSS color string\r\n */\r\n\r\nexport function recomposeColor(color) {\r\n  const {\r\n    type,\r\n    colorSpace\r\n  } = color;\r\n  let {\r\n    values\r\n  } = color;\r\n\r\n  if (type.indexOf('rgb') !== -1) {\r\n    // Only convert the first 3 values to int (i.e. not alpha)\r\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\r\n  } else if (type.indexOf('hsl') !== -1) {\r\n    values[1] = `${values[1]}%`;\r\n    values[2] = `${values[2]}%`;\r\n  }\r\n\r\n  if (type.indexOf('color') !== -1) {\r\n    values = `${colorSpace} ${values.join(' ')}`;\r\n  } else {\r\n    values = `${values.join(', ')}`;\r\n  }\r\n\r\n  return `${type}(${values})`;\r\n}\r\n/**\r\n * Converts a color from CSS rgb format to CSS hex format.\r\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\r\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\r\n */\r\n\r\nexport function rgbToHex(color) {\r\n  // Idempotent\r\n  if (color.indexOf('#') === 0) {\r\n    return color;\r\n  }\r\n\r\n  const {\r\n    values\r\n  } = decomposeColor(color);\r\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\r\n}\r\n/**\r\n * Converts a color from hsl format to rgb format.\r\n * @param {string} color - HSL color values\r\n * @returns {string} rgb color values\r\n */\r\n\r\nexport function hslToRgb(color) {\r\n  color = decomposeColor(color);\r\n  const {\r\n    values\r\n  } = color;\r\n  const h = values[0];\r\n  const s = values[1] / 100;\r\n  const l = values[2] / 100;\r\n  const a = s * Math.min(l, 1 - l);\r\n\r\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\r\n\r\n  let type = 'rgb';\r\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\r\n\r\n  if (color.type === 'hsla') {\r\n    type += 'a';\r\n    rgb.push(values[3]);\r\n  }\r\n\r\n  return recomposeColor({\r\n    type,\r\n    values: rgb\r\n  });\r\n}\r\n/**\r\n * The relative brightness of any point in a color space,\r\n * normalized to 0 for darkest black and 1 for lightest white.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @returns {number} The relative brightness of the color in the range 0 - 1\r\n */\r\n\r\nexport function getLuminance(color) {\r\n  color = decomposeColor(color);\r\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\r\n  rgb = rgb.map(val => {\r\n    if (color.type !== 'color') {\r\n      val /= 255; // normalized\r\n    }\r\n\r\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\r\n  }); // Truncate at 3 digits\r\n\r\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\r\n}\r\n/**\r\n * Calculates the contrast ratio between two colors.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} A contrast ratio value in the range 0 - 21.\r\n */\r\n\r\nexport function getContrastRatio(foreground, background) {\r\n  const lumA = getLuminance(foreground);\r\n  const lumB = getLuminance(background);\r\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\r\n}\r\n/**\r\n * Sets the absolute transparency of a color.\r\n * Any existing alpha values are overwritten.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function alpha(color, value) {\r\n  color = decomposeColor(color);\r\n  value = clamp(value);\r\n\r\n  if (color.type === 'rgb' || color.type === 'hsl') {\r\n    color.type += 'a';\r\n  }\r\n\r\n  if (color.type === 'color') {\r\n    color.values[3] = `/${value}`;\r\n  } else {\r\n    color.values[3] = value;\r\n  }\r\n\r\n  return recomposeColor(color);\r\n}\r\n/**\r\n * Darkens a color.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function darken(color, coefficient) {\r\n  color = decomposeColor(color);\r\n  coefficient = clamp(coefficient);\r\n\r\n  if (color.type.indexOf('hsl') !== -1) {\r\n    color.values[2] *= 1 - coefficient;\r\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\r\n    for (let i = 0; i < 3; i += 1) {\r\n      color.values[i] *= 1 - coefficient;\r\n    }\r\n  }\r\n\r\n  return recomposeColor(color);\r\n}\r\n/**\r\n * Lightens a color.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function lighten(color, coefficient) {\r\n  color = decomposeColor(color);\r\n  coefficient = clamp(coefficient);\r\n\r\n  if (color.type.indexOf('hsl') !== -1) {\r\n    color.values[2] += (100 - color.values[2]) * coefficient;\r\n  } else if (color.type.indexOf('rgb') !== -1) {\r\n    for (let i = 0; i < 3; i += 1) {\r\n      color.values[i] += (255 - color.values[i]) * coefficient;\r\n    }\r\n  } else if (color.type.indexOf('color') !== -1) {\r\n    for (let i = 0; i < 3; i += 1) {\r\n      color.values[i] += (1 - color.values[i]) * coefficient;\r\n    }\r\n  }\r\n\r\n  return recomposeColor(color);\r\n}\r\n/**\r\n * Darken or lighten a color, depending on its luminance.\r\n * Light colors are darkened, dark colors are lightened.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function emphasize(color, coefficient = 0.15) {\r\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\r\n}"],"mappings":"AAAA,SAASA,qBAAqB,IAAIC,sBAAlC,QAAgE,YAAhE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeC,KAAf,EAAwC;EAAA,IAAlBC,GAAkB,uEAAZ,CAAY;EAAA,IAATC,GAAS,uEAAH,CAAG;;EACtC,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,IAAIL,KAAK,GAAGC,GAAR,IAAeD,KAAK,GAAGE,GAA3B,EAAgC;MAC9BI,OAAO,CAACC,KAAR,CAAe,2BAA0BP,KAAM,qBAAoBC,GAAI,KAAIC,GAAI,IAA/E;IACD;EACF;;EAED,OAAOM,IAAI,CAACP,GAAL,CAASO,IAAI,CAACN,GAAL,CAASD,GAAT,EAAcD,KAAd,CAAT,EAA+BE,GAA/B,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASO,QAAT,CAAkBC,KAAlB,EAAyB;EAC9BA,KAAK,GAAGA,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAR;EACA,MAAMC,EAAE,GAAG,IAAIC,MAAJ,CAAY,OAAMH,KAAK,CAACI,MAAN,IAAgB,CAAhB,GAAoB,CAApB,GAAwB,CAAE,GAA5C,EAAgD,GAAhD,CAAX;EACA,IAAIC,MAAM,GAAGL,KAAK,CAACM,KAAN,CAAYJ,EAAZ,CAAb;;EAEA,IAAIG,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAN,CAAUD,MAAV,KAAqB,CAAnC,EAAsC;IACpCC,MAAM,GAAGA,MAAM,CAACE,GAAP,CAAWC,CAAC,IAAIA,CAAC,GAAGA,CAApB,CAAT;EACD;;EAED,OAAOH,MAAM,GAAI,MAAKA,MAAM,CAACD,MAAP,KAAkB,CAAlB,GAAsB,GAAtB,GAA4B,EAAG,IAAGC,MAAM,CAACE,GAAP,CAAW,CAACC,CAAD,EAAIC,KAAJ,KAAc;IAC/E,OAAOA,KAAK,GAAG,CAAR,GAAYC,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAApB,GAA8BV,IAAI,CAACa,KAAL,CAAWD,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAAR,GAAkB,GAAlB,GAAwB,IAAnC,IAA2C,IAAhF;EACD,CAFuD,EAErDI,IAFqD,CAEhD,IAFgD,CAE1C,GAFD,GAEM,EAFnB;AAGD;;AAED,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;EACrB,MAAMC,GAAG,GAAGD,GAAG,CAACE,QAAJ,CAAa,EAAb,CAAZ;EACA,OAAOD,GAAG,CAACX,MAAJ,KAAe,CAAf,GAAoB,IAAGW,GAAI,EAA3B,GAA+BA,GAAtC;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASE,cAAT,CAAwBjB,KAAxB,EAA+B;EACpC;EACA,IAAIA,KAAK,CAACkB,IAAV,EAAgB;IACd,OAAOlB,KAAP;EACD;;EAED,IAAIA,KAAK,CAACmB,MAAN,CAAa,CAAb,MAAoB,GAAxB,EAA6B;IAC3B,OAAOF,cAAc,CAAClB,QAAQ,CAACC,KAAD,CAAT,CAArB;EACD;;EAED,MAAMoB,MAAM,GAAGpB,KAAK,CAACqB,OAAN,CAAc,GAAd,CAAf;EACA,MAAMH,IAAI,GAAGlB,KAAK,CAACsB,SAAN,CAAgB,CAAhB,EAAmBF,MAAnB,CAAb;;EAEA,IAAI,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,MAAvB,EAA+B,OAA/B,EAAwCC,OAAxC,CAAgDH,IAAhD,MAA0D,CAAC,CAA/D,EAAkE;IAChE,MAAM,IAAIK,KAAJ,CAAU9B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAyC,sBAAqBK,KAAM;AACxF,2FADoB,GAC0EZ,sBAAsB,CAAC,CAAD,EAAIY,KAAJ,CAD1G,CAAN;EAED;;EAED,IAAIwB,MAAM,GAAGxB,KAAK,CAACsB,SAAN,CAAgBF,MAAM,GAAG,CAAzB,EAA4BpB,KAAK,CAACI,MAAN,GAAe,CAA3C,CAAb;EACA,IAAIqB,UAAJ;;EAEA,IAAIP,IAAI,KAAK,OAAb,EAAsB;IACpBM,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAa,GAAb,CAAT;IACAD,UAAU,GAAGD,MAAM,CAACG,KAAP,EAAb;;IAEA,IAAIH,MAAM,CAACpB,MAAP,KAAkB,CAAlB,IAAuBoB,MAAM,CAAC,CAAD,CAAN,CAAUL,MAAV,CAAiB,CAAjB,MAAwB,GAAnD,EAAwD;MACtDK,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,CAAUvB,KAAV,CAAgB,CAAhB,CAAZ;IACD;;IAED,IAAI,CAAC,MAAD,EAAS,YAAT,EAAuB,SAAvB,EAAkC,cAAlC,EAAkD,UAAlD,EAA8DoB,OAA9D,CAAsEI,UAAtE,MAAsF,CAAC,CAA3F,EAA8F;MAC5F,MAAM,IAAIF,KAAJ,CAAU9B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAyC,sBAAqB8B,UAAW;AAC/F,6FADsB,GAC0ErC,sBAAsB,CAAC,EAAD,EAAKqC,UAAL,CAD1G,CAAN;IAED;EACF,CAZD,MAYO;IACLD,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAa,GAAb,CAAT;EACD;;EAEDF,MAAM,GAAGA,MAAM,CAACjB,GAAP,CAAWjB,KAAK,IAAIsC,UAAU,CAACtC,KAAD,CAA9B,CAAT;EACA,OAAO;IACL4B,IADK;IAELM,MAFK;IAGLC;EAHK,CAAP;AAKD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMI,YAAY,GAAG7B,KAAK,IAAI;EACnC,MAAM8B,eAAe,GAAGb,cAAc,CAACjB,KAAD,CAAtC;EACA,OAAO8B,eAAe,CAACN,MAAhB,CAAuBvB,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,EAAmCM,GAAnC,CAAuC,CAACwB,GAAD,EAAMC,GAAN,KAAcF,eAAe,CAACZ,IAAhB,CAAqBG,OAArB,CAA6B,KAA7B,MAAwC,CAAC,CAAzC,IAA8CW,GAAG,KAAK,CAAtD,GAA2D,GAAED,GAAI,GAAjE,GAAsEA,GAA3H,EAAgInB,IAAhI,CAAqI,GAArI,CAAP;AACD,CAHM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASqB,cAAT,CAAwBjC,KAAxB,EAA+B;EACpC,MAAM;IACJkB,IADI;IAEJO;EAFI,IAGFzB,KAHJ;EAIA,IAAI;IACFwB;EADE,IAEAxB,KAFJ;;EAIA,IAAIkB,IAAI,CAACG,OAAL,CAAa,KAAb,MAAwB,CAAC,CAA7B,EAAgC;IAC9B;IACAG,MAAM,GAAGA,MAAM,CAACjB,GAAP,CAAW,CAACC,CAAD,EAAI0B,CAAJ,KAAUA,CAAC,GAAG,CAAJ,GAAQxB,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAAhB,GAA0BA,CAA/C,CAAT;EACD,CAHD,MAGO,IAAIU,IAAI,CAACG,OAAL,CAAa,KAAb,MAAwB,CAAC,CAA7B,EAAgC;IACrCG,MAAM,CAAC,CAAD,CAAN,GAAa,GAAEA,MAAM,CAAC,CAAD,CAAI,GAAzB;IACAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAEA,MAAM,CAAC,CAAD,CAAI,GAAzB;EACD;;EAED,IAAIN,IAAI,CAACG,OAAL,CAAa,OAAb,MAA0B,CAAC,CAA/B,EAAkC;IAChCG,MAAM,GAAI,GAAEC,UAAW,IAAGD,MAAM,CAACZ,IAAP,CAAY,GAAZ,CAAiB,EAA3C;EACD,CAFD,MAEO;IACLY,MAAM,GAAI,GAAEA,MAAM,CAACZ,IAAP,CAAY,IAAZ,CAAkB,EAA9B;EACD;;EAED,OAAQ,GAAEM,IAAK,IAAGM,MAAO,GAAzB;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASW,QAAT,CAAkBnC,KAAlB,EAAyB;EAC9B;EACA,IAAIA,KAAK,CAACqB,OAAN,CAAc,GAAd,MAAuB,CAA3B,EAA8B;IAC5B,OAAOrB,KAAP;EACD;;EAED,MAAM;IACJwB;EADI,IAEFP,cAAc,CAACjB,KAAD,CAFlB;EAGA,OAAQ,IAAGwB,MAAM,CAACjB,GAAP,CAAW,CAACC,CAAD,EAAI0B,CAAJ,KAAUrB,QAAQ,CAACqB,CAAC,KAAK,CAAN,GAAUpC,IAAI,CAACa,KAAL,CAAW,MAAMH,CAAjB,CAAV,GAAgCA,CAAjC,CAA7B,EAAkEI,IAAlE,CAAuE,EAAvE,CAA2E,EAAtF;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASwB,QAAT,CAAkBpC,KAAlB,EAAyB;EAC9BA,KAAK,GAAGiB,cAAc,CAACjB,KAAD,CAAtB;EACA,MAAM;IACJwB;EADI,IAEFxB,KAFJ;EAGA,MAAMqC,CAAC,GAAGb,MAAM,CAAC,CAAD,CAAhB;EACA,MAAMc,CAAC,GAAGd,MAAM,CAAC,CAAD,CAAN,GAAY,GAAtB;EACA,MAAMe,CAAC,GAAGf,MAAM,CAAC,CAAD,CAAN,GAAY,GAAtB;EACA,MAAMgB,CAAC,GAAGF,CAAC,GAAGxC,IAAI,CAACP,GAAL,CAASgD,CAAT,EAAY,IAAIA,CAAhB,CAAd;;EAEA,MAAME,CAAC,GAAG,UAACjC,CAAD;IAAA,IAAIkC,CAAJ,uEAAQ,CAAClC,CAAC,GAAG6B,CAAC,GAAG,EAAT,IAAe,EAAvB;IAAA,OAA8BE,CAAC,GAAGC,CAAC,GAAG1C,IAAI,CAACN,GAAL,CAASM,IAAI,CAACP,GAAL,CAASmD,CAAC,GAAG,CAAb,EAAgB,IAAIA,CAApB,EAAuB,CAAvB,CAAT,EAAoC,CAAC,CAArC,CAAtC;EAAA,CAAV;;EAEA,IAAIxB,IAAI,GAAG,KAAX;EACA,MAAMyB,GAAG,GAAG,CAAC7C,IAAI,CAACa,KAAL,CAAW8B,CAAC,CAAC,CAAD,CAAD,GAAO,GAAlB,CAAD,EAAyB3C,IAAI,CAACa,KAAL,CAAW8B,CAAC,CAAC,CAAD,CAAD,GAAO,GAAlB,CAAzB,EAAiD3C,IAAI,CAACa,KAAL,CAAW8B,CAAC,CAAC,CAAD,CAAD,GAAO,GAAlB,CAAjD,CAAZ;;EAEA,IAAIzC,KAAK,CAACkB,IAAN,KAAe,MAAnB,EAA2B;IACzBA,IAAI,IAAI,GAAR;IACAyB,GAAG,CAACC,IAAJ,CAASpB,MAAM,CAAC,CAAD,CAAf;EACD;;EAED,OAAOS,cAAc,CAAC;IACpBf,IADoB;IAEpBM,MAAM,EAAEmB;EAFY,CAAD,CAArB;AAID;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,YAAT,CAAsB7C,KAAtB,EAA6B;EAClCA,KAAK,GAAGiB,cAAc,CAACjB,KAAD,CAAtB;EACA,IAAI2C,GAAG,GAAG3C,KAAK,CAACkB,IAAN,KAAe,KAAf,GAAuBD,cAAc,CAACmB,QAAQ,CAACpC,KAAD,CAAT,CAAd,CAAgCwB,MAAvD,GAAgExB,KAAK,CAACwB,MAAhF;EACAmB,GAAG,GAAGA,GAAG,CAACpC,GAAJ,CAAQwB,GAAG,IAAI;IACnB,IAAI/B,KAAK,CAACkB,IAAN,KAAe,OAAnB,EAA4B;MAC1Ba,GAAG,IAAI,GAAP,CAD0B,CACd;IACb;;IAED,OAAOA,GAAG,IAAI,OAAP,GAAiBA,GAAG,GAAG,KAAvB,GAA+B,CAAC,CAACA,GAAG,GAAG,KAAP,IAAgB,KAAjB,KAA2B,GAAjE;EACD,CANK,CAAN,CAHkC,CAS9B;;EAEJ,OAAOe,MAAM,CAAC,CAAC,SAASH,GAAG,CAAC,CAAD,CAAZ,GAAkB,SAASA,GAAG,CAAC,CAAD,CAA9B,GAAoC,SAASA,GAAG,CAAC,CAAD,CAAjD,EAAsDI,OAAtD,CAA8D,CAA9D,CAAD,CAAb;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,CAA0BC,UAA1B,EAAsCC,UAAtC,EAAkD;EACvD,MAAMC,IAAI,GAAGN,YAAY,CAACI,UAAD,CAAzB;EACA,MAAMG,IAAI,GAAGP,YAAY,CAACK,UAAD,CAAzB;EACA,OAAO,CAACpD,IAAI,CAACN,GAAL,CAAS2D,IAAT,EAAeC,IAAf,IAAuB,IAAxB,KAAiCtD,IAAI,CAACP,GAAL,CAAS4D,IAAT,EAAeC,IAAf,IAAuB,IAAxD,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,KAAT,CAAerD,KAAf,EAAsBV,KAAtB,EAA6B;EAClCU,KAAK,GAAGiB,cAAc,CAACjB,KAAD,CAAtB;EACAV,KAAK,GAAGD,KAAK,CAACC,KAAD,CAAb;;EAEA,IAAIU,KAAK,CAACkB,IAAN,KAAe,KAAf,IAAwBlB,KAAK,CAACkB,IAAN,KAAe,KAA3C,EAAkD;IAChDlB,KAAK,CAACkB,IAAN,IAAc,GAAd;EACD;;EAED,IAAIlB,KAAK,CAACkB,IAAN,KAAe,OAAnB,EAA4B;IAC1BlB,KAAK,CAACwB,MAAN,CAAa,CAAb,IAAmB,IAAGlC,KAAM,EAA5B;EACD,CAFD,MAEO;IACLU,KAAK,CAACwB,MAAN,CAAa,CAAb,IAAkBlC,KAAlB;EACD;;EAED,OAAO2C,cAAc,CAACjC,KAAD,CAArB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASsD,MAAT,CAAgBtD,KAAhB,EAAuBuD,WAAvB,EAAoC;EACzCvD,KAAK,GAAGiB,cAAc,CAACjB,KAAD,CAAtB;EACAuD,WAAW,GAAGlE,KAAK,CAACkE,WAAD,CAAnB;;EAEA,IAAIvD,KAAK,CAACkB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAAnC,EAAsC;IACpCrB,KAAK,CAACwB,MAAN,CAAa,CAAb,KAAmB,IAAI+B,WAAvB;EACD,CAFD,MAEO,IAAIvD,KAAK,CAACkB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAA/B,IAAoCrB,KAAK,CAACkB,IAAN,CAAWG,OAAX,CAAmB,OAAnB,MAAgC,CAAC,CAAzE,EAA4E;IACjF,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;MAC7BlC,KAAK,CAACwB,MAAN,CAAaU,CAAb,KAAmB,IAAIqB,WAAvB;IACD;EACF;;EAED,OAAOtB,cAAc,CAACjC,KAAD,CAArB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASwD,OAAT,CAAiBxD,KAAjB,EAAwBuD,WAAxB,EAAqC;EAC1CvD,KAAK,GAAGiB,cAAc,CAACjB,KAAD,CAAtB;EACAuD,WAAW,GAAGlE,KAAK,CAACkE,WAAD,CAAnB;;EAEA,IAAIvD,KAAK,CAACkB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAAnC,EAAsC;IACpCrB,KAAK,CAACwB,MAAN,CAAa,CAAb,KAAmB,CAAC,MAAMxB,KAAK,CAACwB,MAAN,CAAa,CAAb,CAAP,IAA0B+B,WAA7C;EACD,CAFD,MAEO,IAAIvD,KAAK,CAACkB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAAnC,EAAsC;IAC3C,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;MAC7BlC,KAAK,CAACwB,MAAN,CAAaU,CAAb,KAAmB,CAAC,MAAMlC,KAAK,CAACwB,MAAN,CAAaU,CAAb,CAAP,IAA0BqB,WAA7C;IACD;EACF,CAJM,MAIA,IAAIvD,KAAK,CAACkB,IAAN,CAAWG,OAAX,CAAmB,OAAnB,MAAgC,CAAC,CAArC,EAAwC;IAC7C,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;MAC7BlC,KAAK,CAACwB,MAAN,CAAaU,CAAb,KAAmB,CAAC,IAAIlC,KAAK,CAACwB,MAAN,CAAaU,CAAb,CAAL,IAAwBqB,WAA3C;IACD;EACF;;EAED,OAAOtB,cAAc,CAACjC,KAAD,CAArB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASyD,SAAT,CAAmBzD,KAAnB,EAA8C;EAAA,IAApBuD,WAAoB,uEAAN,IAAM;EACnD,OAAOV,YAAY,CAAC7C,KAAD,CAAZ,GAAsB,GAAtB,GAA4BsD,MAAM,CAACtD,KAAD,EAAQuD,WAAR,CAAlC,GAAyDC,OAAO,CAACxD,KAAD,EAAQuD,WAAR,CAAvE;AACD"},"metadata":{},"sourceType":"module"}